generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                          String           @id @default(cuid())
  name                        String?
  email                       String?          @unique
  emailVerified               DateTime?
  image                       String?
  currentSelectedRestaurantId Int?             @unique
  accounts                    Account[]
  RestaurantUser              RestaurantUser[]
  sessions                    Session[]
  Restaurant                  Restaurant?      @relation(fields: [currentSelectedRestaurantId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String
  order  Int
  pageId Int
  Page   Page   @relation(fields: [pageId], references: [id])
  Item   Item[]
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  order       Int
  categoryId  Int
  Category    Category @relation(fields: [categoryId], references: [id])
}

model Page {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  order        Int
  restaurantId Int
  Category     Category[]
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Restaurant {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  location       String?
  phoneNumber    String?
  status         RestaurantStatus
  Page           Page[]
  RestaurantUser RestaurantUser[]
  User           User?
}

model RestaurantUser {
  id           Int        @id @default(autoincrement())
  userId       String
  restaurantId Int
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  User         User       @relation(fields: [userId], references: [id])

  @@unique([userId, restaurantId])
}

enum RestaurantStatus {
  ACTIVE
  ARCHIVE
}
